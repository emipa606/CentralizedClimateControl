using System.Collections.Generic;

namespace CentralizedClimateControl;

public class AirFlowNet
{
    public readonly List<CompAirFlowConsumer> Consumers = [];
    public readonly List<CompAirFlowProducer> Producers = [];
    public readonly List<CompAirFlowTempControl> TempControls = [];
    public float AverageConvertedTemperature;

    public float AverageIntakeTemperature;

    public List<CompAirFlow> Connectors = [];
    public float FlowEfficiency = 1.0f;

    public AirFlowType FlowType;

    private float ThermalCapacity;
    public float ThermalEfficiency = 1.0f;

    public int GridID { get; set; } = -2;

    public float CurrentIntakeAir { get; private set; }

    private float CurrentExhaustAir { get; set; }

    /// <summary>
    ///     Tick the Producers of Air Flow.
    ///     We calculate the Intake Temperature here and the Total Air generated by the network.
    /// </summary>
    private void tickProducers()
    {
        var airFlow = 0.0f;
        var tempSum = 0.0f;
        var activeCount = 0;

        foreach (var producer in Producers)
        {
            if (!producer.IsOperating() || !producer.IsActive())
            {
                continue;
            }

            airFlow += producer.CurrentAirFlow;
            tempSum += producer.IntakeTemperature;
            activeCount++;
        }

        if (activeCount > 0)
        {
            AverageIntakeTemperature = tempSum / activeCount;
            CurrentIntakeAir = airFlow;
        }
        else
        {
            AverageIntakeTemperature = 0.0f;
        }

        CurrentIntakeAir = airFlow;
    }

    /// <summary>
    ///     Process the Consumers for a Tick. Consumers are the ones who consume Air Flow. They can be Vents (for now).
    ///     We calculate the total Exhaust capacity of the Network. This Exhaust Capacity is used by the Flow Efficiency
    ///     Attribute.
    /// </summary>
    private void tickConsumers()
    {
        var airFlow = 0.0f;

        foreach (var consumer in Consumers)
        {
            if (!consumer.IsOperating())
            {
                continue;
            }

            airFlow += consumer.ExhaustAirFlow;
        }

        CurrentExhaustAir = airFlow;
    }

    /// <summary>
    ///     Process the Buildings that Control Climate. Generally, the Climate Control Units.
    ///     Here, we process variables to be used to Thermal Efficiency.
    /// </summary>
    private void tickTempControllers()
    {
        var tempSum = 0.0f;
        var thermalCapacity = 0.0f;
        var activeCount = 0;

        foreach (var compAirFlowTempControl in TempControls)
        {
            if (!compAirFlowTempControl.IsOperating() || !compAirFlowTempControl.IsActive())
            {
                continue;
            }

            tempSum += compAirFlowTempControl.ConvertedTemperature;
            thermalCapacity += compAirFlowTempControl.ThermalCapacity;
            activeCount++;
        }

        // No Temperature Controllers -> Then Use the Intake Temperature directly.
        if (activeCount > 0)
        {
            ThermalCapacity = thermalCapacity;
            AverageConvertedTemperature = tempSum / activeCount;
        }
        else
        {
            ThermalCapacity = CurrentIntakeAir;
            AverageConvertedTemperature = AverageIntakeTemperature;
        }
    }

    /// <summary>
    ///     Process one Tick of the Air Flow Network. Here we process the Producers, Consumers and Climate Controllers.
    ///     We Calculate the Flow Efficiency (FE) and Thermal Efficiency (TE).
    ///     FE & TEs are recorded for each individual network.
    /// </summary>
    public void AirFlowNetTick()
    {
        tickProducers();
        tickTempControllers();
        tickConsumers();

        if (CurrentIntakeAir > 0)
        {
            ThermalEfficiency = ThermalCapacity / CurrentIntakeAir;
        }
        else
        {
            ThermalEfficiency = 0.0f;
        }

        if (CurrentExhaustAir > 0)
        {
            FlowEfficiency = CurrentIntakeAir / CurrentExhaustAir;

            if (FlowEfficiency > 1.0f)
            {
                FlowEfficiency = 1.0f;
            }
        }
        else
        {
            FlowEfficiency = 0.0f;
        }
    }
}